# Author: Dhanush Gowda, SID: 24245807

# This script is used to clean and merge three tab-separated value (TSV) files. 
# It checks if the correct number of arguments are provided and validates if the files are in TSV format with the same number of fields in each row.
# The script then merges the files based on certain fields, removes the 'continent' column, filters rows based on the 'code' column and the 'year' column.
# It then sorts the data and rearranges the columns in a specific order. The final cleaned, merged and sorted data is then written to 'output.tsv'.


#!/bin/bash

# Check for three arguments
if [ "$#" -ne 3 ]; then
    echo "Usage: $0 file1.tsv file2.tsv file3.tsv" >&2
    exit 1
fi

# Check if all files ia tsv
validate_file() {
    local file=$1

    # Check if file is tab-separated
    if ! head -n 1 "$file" | grep -q $'\t'; then
        echo "File $file is not tab separated!"
        exit 1
    fi

    # Check if file has the same number of fields in each row
    local header_field_count
    header_field_count=$(head -n1 "$file" | awk -F'\t' '{print NF}')
    awk -F '\t' -v expected_fields="$header_field_count" '
        NR > 1 && NF != expected_fields { print FILENAME ": line " NR " has " NF " fields instead of " expected_fields }
    ' "$file"
}

for file in "$1" "$2" "$3"; do
    validate_file "$file"
done

# Merge the files
merge_files() {
    awk 'BEGIN { FS=OFS="\t" }
    NR==FNR { data[$1,$3] = substr($0, index($0,$3)); next }
    { print $0, data[$1,$3] }' "$1" "$2" | \
    awk 'BEGIN { FS=OFS="\t" }
    NR==FNR { data[$1,$3] = substr($0, index($0,$3)); next }
    { print $0, data[$1,$3] }' "$3" -
}

# remove the continent column and keep only the columns that are needed
remove_continent_column() {
    awk -F '\t' '
    BEGIN {
        OFS = FS
    }
    NR==1 {
        for (i = 1; i <= NF; i++) {
            if (tolower($i) == "continent") {
                continent_col = i
            } else {
                cols[++col_count] = i
            }
        }
    }
    {
        for (j = 1; j <= col_count; j++) {
            printf "%s%s", $cols[j], (j == col_count ? ORS : OFS)
        }
    }'
}

filter_by_countrycode() {
    awk -F'\t' '
    BEGIN { OFS = FS }
    NR==1 {
        for (i = 1; i <= NF; i++) {
            if (tolower($i) == "code") {
                code_col = i
            }
        }
        print
    }
    $code_col != ""'
}

filter_by_year() {
    awk -F'\t' '
    BEGIN { OFS = FS }
    NR==1 {
        for (i = 1; i <= NF; i++) {
            if (tolower($i) == "year") {
                year_col = i
            }
        }
        print
    }
    $year_col >= 2011 && $year_col <= 2021'
}

sort_data() {
    awk -F'\t' 'NR==1 { print; next } { print $0 | "sort -k1,1 -k3,3" }'
}

rearrange_columns() {
    awk -F'\t' '
    BEGIN { OFS = FS }
    NR==1 {
        for (i = 1; i <= NF; i++) {
            col_name = tolower($i)
            if (col_name == "year") { cols[3] = i }
            else if (col_name == "entity" || col_name == "country") { cols[1] = i }
            else if (col_name == "code") { cols[2] = i }
            else if (index(col_name, "\"gdp per capita, ppp (constant 2017 international $)\"") > 0) { cols[4] = i }
            else if (col_name == "population (historical estimates)") { cols[5] = i }
            else if (col_name == "\"homicide rate per 100,000 population - both sexes - all ages\"") { cols[6] = i }
            else if (index(col_name, "life expectancy - sex: all - age: at birth - variant: estimates") > 0) { cols[7] = i }
            else if (col_name == "cantril ladder score") { cols[8] = i }
        }
    }
    {
        for (i = 1; i <= 8; i++) {
            if (cols[i] != "") {
                printf "%s\t", $cols[i]
            }
            if (i == 8) {
                printf "\n"
            }
        }
    }'
}

merged_data=$(merge_files "$1" "$2" "$3")
cleaned_data=$(echo "$merged_data" | remove_continent_column)
filtered_data=$(echo "$cleaned_data" | filter_by_countrycode)
year_filtered_data=$(echo "$filtered_data" | filter_by_year)
sorted_data=$(echo "$year_filtered_data" | sort_data)
final_data=$(echo "$sorted_data" | rearrange_columns)

# Output the final data
echo "$final_data" > output.tsv
